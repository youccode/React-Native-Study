

<Day 6>
    RN에서는 React와는 다르게 HTML 속 Tag 사용이 불가능
    
    1. 처음으로 배우게 될 Tag => <View> == <div>
        - <View>는 따로 크기를 지정하지 않은 이상, 안에 있는 Component 만큼의 크기만을 차지함.
    
    2. <Text>: Text를 적기 위해서 사용해야 하는 Tag

    3. Tag 내부 속에 style prop을 이용하여 style 구현이 가능.
        style ={{
            width:100,
            height: 100,
            backgroundColor: "red",
            flexDirection: "column" ..
        }}
        - 위와 같은 구현은 귀찮기 때문에 제공해주는 library 
            => {StyleSheet}
        <Example Code>

        const styles = StyleSheet.create({ //styles가 convention
            mainView: { //mainView가 style의 이름
                alignContent: "center",
                height: 100,
                width: 100,
            }
        })

        * StyleSheet은 잘못된 내용이 있는지 debugging을 해주는 장점이 있다.

        - <View>를 지속적으로 사용하다 보면 Component 간의 차이를 인지하기 힘듬
            - style ={{bordeWidth:1}} 경계를 나타내게 하여 확인을 하면 편함.
            + borderColor를 이용하는 것도 도움이 됨.
                - ex) borderColor:"red"

    4. <Button> => Native, 기본적인 기능을 지니고 있음, Closing Tag임.
        - IOS는 IOS의 Button, Android의 경우, 또다른 Button. (자동으로 가지고 있음 => Native Button)
        - title을 필수적으로 가져야 함.
        - onPress ={() => {console.log("Hello") ~~}}

    5. <Image source = {require('./something.jpg' style={()} resizeMode={} }/>
        - resizeMode: Image의 크기를 조절하는 것.
        - 

    6. <TextInput>: 생긴대로 Text 입력 받는 Component
        - value: 필수, Text가 저장되는 곳
        - onChangeText: 필수, 타이핑 과정에서 하게 될 일을 적는 곳

    7. <ScrollView>: 내부에 있는 것들이 스크롤이 가능해짐.
        <Example Code>
        <ScrollView>
        
        <View>
        </View>
        
        <View>
        </View>
        
        <View>
        </View>
        </ScrollView>

    8. <FlatList>: <ScrollView>와 동일한 기능을 함.
        - 화면에 적용되는 부분만 로딩됨. (ScrollView의 경우, 미리 모든 것을 로딩해옴.)
        - prop으로 {data}를 {array}형태로만 받아와야 함.
        - style은 FlatList의 style을 정의하는 것.
        - 내부의 content container의 style을 정하는 것은 contentContainerStyle로 정의해줘야 함.
            - flexbox의 내용도 여기에 들어와야 함.
            - ex) contentContainerStyle={{flexDirection:"column", alignItem:"center"}}

    8. JSX 문법 내용 추가
        - property spread notation
            : 내가 이미 만들어놓은 object들의 prop을 바로 넘기고 싶은 상황에서는
            - ex) [...prop, addedOne] 다음의 형태로 사용하면 prevProp을 가져옴과 동시에
            추가 과정까지 완료.

    9. 우리가 만든 Component를 Touch가 가능하도록 하는 Component들

        - TouchableOpactiy
            - Opactiy라는 이름에 맞게 Touch를 했을 때, 투명도가 살짝 변하게 됨.
        - TouchableHighlight
            - Touch시 해당 부분이 Highlight 처리됨.
        - TouchableWithoutFeedback
            - Touch시 아무 효과가 없는 것.

        - TouchableNativeFeedback
            - Android에서만 가능한 Component
            - 누른 지점에서 퍼지는 파동 애니메이션을 사용할 수 있음.

    10. CSS 복습.
        - Flexbox => display의 속성값으로 flex 값을 지정해주어야 사용할 수 있음.
            - Main Axis: 주축, flex item이 배치되고 있는 방향.
                - Main Axis를 설정해주기 위해서 flex-direction의 속성값을 지정해주어야 함.
                    - ex) flex-direction: [ row| row-reverse | column | column-reverse ]
                        - 다음의 방향은 flex container의 방향에 영향을 받음.
                            - flex container의 방향은 dir 속성의 값이 지정 ltr(왼쪽부터) or rtl(오른쪽부터)

            - Cross Axis: 주축에 대하여 수직인 축

            - flex-wrap: flex item들이 강제적으로 한 줄에 있도록 할 것인지에 대해 결정하는 속성
                - ex) flex-wrap: [ nowrap | wrap | wrap-reverse ]
            
            - flex-flow: flex-direction과 flex-wrap을 한 번에 표시하고 싶을 때 사용하는 것
                - ex) flex-flow: row wrap;

            - flex item의 크기를 조정하는 방법
                - 내부에 flex: [비율] [최소 크기];의 형태로 적는다.
                - flex에 들어가는 숫자는 상대적인 비율임.
                - 최소 크기를 적게 되면, 최소 크기만큼을 할당받은 이후, 나머지 영역을 비율에 맞게 분배.
            
            - justify-content: 주축에 대하여 flex item들의 배열을 설정함.
                - flex-start: 주축 기준으로 시작부터
                - flex-end: 주축 기준으로 끝에서부터
                - center: 가운데 정렬
                - space-between: item들의 양끝에는 공간이 생기지 않고, item 사이에만 균일한 공간이 생김
                - space-around: space-evenly와 거의 비슷한듯.
                - space-evenly: item들의 사이 및 양 끝을 고려하여 균일한 간격을 만듬.

            - align-items: Cross Axis에 대하여 flex 항목들의 배열 설정.
                - stretch: 가장 큰 높이를 가진 값을 기준으로 모두 길어짐.
                - flex-end: Cross Axis 방향을 기준으로 가장 끝부터 시작
                - flex-start: Cross Axis 방향을 기준으로 가장 base부터 시작
                - center: Cross Axis의 중앙으로 item들이 정렬
                - baseline: Cross Axis를 기준으로 가장 base부터 정렬

        11. SafeAreaView: 스마트폰의 navigation var로 인해서 가려지는 부분을 해소해주기 위한 Component
            - 사용하고자 하는 부분을 <SafeAreaView></SafeAreaView>로 감싸주면 됨.

        12. KeyboardAvoidingView
            : 스마트폰에서 keyboard를 사용하게 될 때, 보이지 않게 되는 요소들을 위로 올려주는 Component

            - 작동 방식이 SafeAreaView와 더불어 거지같다고 한다.

        13. borderRadius: style 내부에서 사용하는 속성, border의 모서리 부분을 둥글게 만들 수 있음.
            - borderTopRightRadius와 같이 특정 위치만 조작하는 것도 가능함.

        14. 만들어놓은 Card 혹은 다른 것에 그림자를 부여하는 방법
            - Android => elevation을 이용하여 z축 방향으로 뜨게 함.
                - backgroundColor를 지정해주고 사용해야 함.

            - IOS => shadowColor: "black"
                     shadowRadius:
                     shadowOffset:
                     shadowOpacity:

            * 서로의 것은 각자의 OS에 대해서만 반영됨.

        15. expo font: 우리가 원하는 폰트를 사용하는 것을 도와주는 library

        16. Javascript의 async, await이란? 비동기 처리 패턴 중의 하나
            - async는 synchronous에 반대되는 말로서 결과가 return되는 시점이 다른 것
                - ex) async function something() {
                        await someFunction()

                        위의 함수가 실행되고 난 이후에, 실행되고자 하는 코드 
                    } 

        17. 휴대폰 화면을 다루는 것과 관련된 API
            - 1. Dimensions
                - 사용법: const width=Dimensions.get("screen | window ").width
                          const height=Dimensions.get("screen | window ").height 
                    - window는 사용 가능한 실질적 화면의 크기
                    - screen은 navigation bar나 status bar를 모두 포함하는 크기

                - screen 사이즈가 이후에 변하고 나도 값이 변하지 않음. 능동적이지 않음.
                    - Dimensions.addEventListner()를 이용하여 이를 해결할 수 있음.

            - 2. useWindowDimensions
                - Dimensions에서 불편했던 사이즈에 따라 값이 변하는 것을 지원해줌.
                - Android에서 오류가 조금 있음.

        18. app.json파일을 통해서 app에 대한 자세한 설정을 변경할 수 있음.
            - 화면의 가로, 세로 전환의 경우 
                - 세로: portrait
                - 가로: landscape
                - 전환 가능: default

        19. Platfrom API: 앱을 사용하는 유저의 OS가 IOS인지 Android인지 구분이 가능
            - ex) Platfrom.OS === "android" ? 300: 400

            - 들어가는 Component의 대부분이 다른 경우에는 파일의 이름을 바꿔서 설정하는 방법도 있음
                - TodoCard.android.js | TodoCard.ios.js로 하면 알아서 파일을 처리함.

        20. 버튼을 눌렀을 때, 화면이 띄워지면서 타이핑 가능한 기능
            - Modal을 이용하여 구현 가능
                - Modal 내부의 필수 속성인 visible에 대하여 useState으로 값을 설정.
                    - boolean 값이 true인 경우에만 보이게 됨.
                - Modal Tag로 띄워졌으면 하는 코드를 작성.
            
            - 위의 방법은 style 및 여러 가지 면으로 복잡하다고 함.
                - {isModalVisble && <View>{SomeCodes}</View>} 다음과 같은 문법으로도 사용이 가능.
                - {isModalVisble ? <View>{SomeCodes}</View> : null} 이것도 사용 가능.

        21. 화면 간의 전환을 다루기 위해 사용하는 Component => React Naviation
            - 기본적인 구조의 경우, 만들어놓은 코드를 참조. /container의
            - 각 Screen의 Component에서는 props.navigation을 이용하여 navigator의 함수를 사용 가능.

            - Screen 간의 데이터 전달 과정에서는 parameter를 넘겨주는 것으로서 정보를 전달함
                - ex) navigation.navigate('RouteName', {/* Data that we want to hand over*/}) 

                전달 받은 다른 Screen
                function TestScreen({route, navigation}) {
                    const { Data1, Data2 } = route.params; => data를 받아오는 code
                 }

                - 다른 screen에서도 전달 받은 screen의 data를 업데이트 할 수 있음.
                    - ex) props.setParams를 이용하여 변경 가능. 

        22. styling 중에 "num%"와 같은 표현을 쓸 경우, parent가 가지고 있는 영역에 대한
            percentage로 표현이 됨.
            * Parent의 값이 지정되어 있어야 함.

        23. Alert <= React Native
            - Javascript의 alert와 비슷하지만 조금 더 고급진 기능 구현 가능
            - Alert.alert()로 사용이 가능
            - ex)
            Alert.alert(
                "You Pressed the Todo Button", => Alert의 제목
                 "Detailed Content", => Alert의 메세지 내용
                 [
                  {
                    text: "Cancel",
                    onPress: () => Alert.alert("Cancle Pressed"),
                    style: "cancel",
                  }, => Alert를 눌렀을 때, 나오게 되는 Button 
                  {
                    cancelable: true, => Alert를 제외한 나머지 화면 부분을 터치 시 꺼짐
                    onDismiss: () => 취소를 눌렀을 때, 작동되는 함수
                    Alert.alert(
                    "This alert was dismissed by tapping outside of the alert dialog."
                  } => Button에 대한 Option 설정 가능

        24. Header에 달리게 되는 Button
            - Header의 Button을 스타일링하고 이후에는 Screen 간 이동을 해야 한다.
              하지만 Screen 간 이동을 위한 props은 각 Screen에서 받는 것이므로 못 받는다.

            - 이를 해결하기 위해 Stack.screen 내부에 option 속성을 활용한다.
                - ex)
                options={(props) => { // 다음과 같이 props를 받아올 수 있음.
                return({
                    headerLeft: <Button title="작성취소" onPress={() => {props.navigation.navigate("Main")}} />,
                    headerRight: <Button title="저장" onPress={() => {}} />,
                })
                }}

            - useEffect를 이용하여 mount되는 과정에서 생성되도록 하여도 되지만, 1프레임 정도 느리다고 함.(비추)

        25. Screen간의 이동이 아닌 Global State을 이용하는 방법.
            - React-redux
                - reducer
                    - combineReducer(conventionName은 rootReducer)를 생성해줌, 
                      여러 개의 reducer들을 모아주는 역할을 함.
                    - 실질적인 Data의 변화가 일어나는 장소.
                - actions
                    - 어떠한 action들이 있는 지에 대하여 정의 및 어떤 object를 넘겨줄 지를 정의.

            - useSelecter
                - 생성한 state(rootReducer) 속의 여러 가지 state들 중 필요한 것을 골라오는 역할.
                    - ex) useSelecter(state => state.rootReducerName.ReducerName) 

            - useDispatch
                - 우리가 만들어놓은 action들을 사용하기 위해서 쓰는 것
                - 그냥 바로 dispatch를 쓰는 것이 낫다고 생각할 수 있지만 backend에서 다룰 때는
                  reducer들을 만들어놓은 상태에서 관리하는 것이 더욱 효율적임.

        26. 서버와 데이터 연동하는 방법
            - firebase를 이용하는 것.
                - 서버에서 데이터를 받아올 때는 다운로드되는 시간을 고려하는 처리 방식이 필요함
                    => async 방식을 사용함.

                - 하지만 reducer는 synchronous해야 함.
                - Action도 동일하지만 library를 이용하여 가능하게 함.
                    - redux-thunk => 이름 안 정해있어서 알아서 정해서 import
                    - redux => applyMiddleware
                        - 미들웨어는 저장소의 dispatch 메서드를 재미삼아서나 실용적으로 감쌀 수 있게 해줍니다.
                            - dispatch 자체가 하나의 함수임. reducer의 함수를 작동시킬 수 있게 함.
                            - ex) createStore(rootReducer, applyMiddleware(ReduxThunk));
                            - 저장소를 만드는 과정에서 2번째 parameter로 넘겨줌.
                        - 위의 정의와 같이 저장소를 위해 사용하는 dispatch method를 수정할 수 있게 됨(aysnc 사용 가능)

                - Baekend 관련 연산 및 async code가 가능, fetch code를 이용하여 서버와 연결
                  firebase에서 가져온  url 뒤에 dir를 만드는 것으로 원하는 dir에 생성 가능.
                  firebase만이 지원하는 기능임.
                  ++firebase에서는 CustomId를 제공해줌. 따로 내가 추가로 id를 설정하는 것도 가능함.
                    - firebase에서 제공해준 customId를 사용하는 방법.
                - firebase를 사용하고 난 후에는, 이를 불러오는 function도 존재해야 함.

                - fetch code 내부에 들어가는 내용은 rest api임 (추후 공부 필요)
                    - method:"POST" => 데이터를 추가하는 작업에 활용됨.
                    - method:"PATCH | PUT" => 데이터를 수정하는 과정에서 사용됨.
                        - PATCH의 경우, 변화를 주고자 하는 내용을 골라서 수정이 가능함.
                        - PUT의 경우, 데이터를 그 위에 덮어씌우는 형태임. 일부 값만 줄 경우, 나머지 값은 defualt 처리됨. (null or undefined)
                        - DELETE의 경우, 말 그대로 데이터를 삭제함. 따로 header, body가 필요없음.

        27. Authentication => 회원가입.
            - User가 회원가입을 함 => server에서 User에게 Token을 부여함.
              => User가 자신의 Data를 처리할 때, Token을 바탕으로 확인 후 권한을 얻음.

            - firebase에서의 Authentication 방법은 firebase auth rest api를 검색 후, 
              document에서 말해주는 대로 실행하면 된다. 
